# -*- shell-script -*-
#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# https://github.com/robbyrussell/oh-my-zsh/issues/449
# Stops trying to match on commands like
# git reset HEAD^
setopt NO_NOMATCH

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# * terminal-notifier
# Workaround to make this work with tmux.
# alias terminal-notifier='reattach-to-user-namespace terminal-notifier'
tn() {
    echo "$@"| terminal-notifier
}
# Notify that we're done
tnd() {
    echo "done" | terminal-notifier
}

# * Utilities
# Mkdir and cd into it
mkdircd ()
{
    mkdir -p -- "$1" &&
        cd -P -- "$1"
}
alias mc="mkdircd"

# Get the current datetime as a UTC ISO str
utc () {
    date -u +"%Y-%m-%dT%H:%M:%SZ"
}

# Get the cheat.sh docs for the given command
cheat () {
    curl cheat.sh/"$1"
}
alias ch="cheat"

# Output the biggest 10 files in human readable form.
big-files() {
    # Uses gsort installed from `brew install coreutils`
    du -hsx * | gsort -rh | head -10
}

self-signed-certificates() {
    # Needs OpenSSL installed. Generates key/cert pairs for use
    openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365
}


# * Emacs
# When emacs is frozen, run this to force Emacs to stop what it's doing and give control back to you.
# One side-effect of this is that debug-on-quit is toggled, so we toggle it off immediately afterward
unfreeze-emacs() {
    # On OSX, emacs is known as `Emacs`
    pkill -SIGUSR2 Emacs

    # Undo `debug-on-quit`
    emacsclient --eval "(progn (toggle-debug-on-quit))"
}

# Install git-subrepo.
source ~/.dotfiles/git-subrepo/.rc

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Setting up nvm in its own function because it slows down the shell to have it
# always active.
setup-nvm() {
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
}

ftpane() {
    local panes current_window current_pane target target_window target_pane
    panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
    current_pane=$(tmux display-message -p '#I:#P')
    current_window=$(tmux display-message -p '#I')

    target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

    target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
    target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

    if [[ $current_window -eq $target_window ]]; then
        tmux select-pane -t ${target_window}.${target_pane}
    else
        tmux select-pane -t ${target_window}.${target_pane} &&
            tmux select-window -t $target_window
    fi
}

. /usr/local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh
